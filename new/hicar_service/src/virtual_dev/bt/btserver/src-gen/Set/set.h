/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SET_H__
#define __SET_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.bluetooth.set */

#define TYPE_SET (set_get_type ())
#define SET(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SET, Set))
#define IS_SET(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SET))
#define SET_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SET, SetIface))

struct _Set;
typedef struct _Set Set;
typedef struct _SetIface SetIface;

struct _SetIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_enable_auto_connect) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_enableconnect);

  gboolean (*handle_factoryreset) (
    Set *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_auto_answer) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_autoanswer);

  gboolean (*handle_set_auto_connect) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_autoconnect);

  gboolean (*handle_set_local_device_name) (
    Set *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_set_power) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_power);

  gboolean (*handle_set_scan_enable) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_scan);

  gboolean (*handle_set_scan_time) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gint arg_time);

  gboolean (*handle_setbt_power) (
    Set *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_power);

  gboolean  (*get_auto_state) (Set *object);

  const gchar * (*get_btversion) (Set *object);

  const gchar * (*get_local_address) (Set *object);

  const gchar * (*get_local_name) (Set *object);

  gboolean  (*get_power_state) (Set *object);

  void (*auto_state_changed) (
    Set *object,
    gboolean arg_state);

  void (*power_state_changed) (
    Set *object,
    gboolean arg_powerState);

  void (*version_state_changed) (
    Set *object,
    const gchar *arg_verson);

};

GType set_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *set_interface_info (void);
guint set_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void set_complete_set_power (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_setbt_power (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_set_scan_enable (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_set_local_device_name (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_set_auto_connect (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_enable_auto_connect (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_set_auto_answer (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_set_scan_time (
    Set *object,
    GDBusMethodInvocation *invocation);

void set_complete_factoryreset (
    Set *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void set_emit_power_state_changed (
    Set *object,
    gboolean arg_powerState);

void set_emit_auto_state_changed (
    Set *object,
    gboolean arg_state);

void set_emit_version_state_changed (
    Set *object,
    const gchar *arg_verson);



/* D-Bus method calls: */
void set_call_set_power (
    Set *proxy,
    gboolean arg_power,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_set_power_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_set_power_sync (
    Set *proxy,
    gboolean arg_power,
    GCancellable *cancellable,
    GError **error);

void set_call_setbt_power (
    Set *proxy,
    gboolean arg_power,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_setbt_power_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_setbt_power_sync (
    Set *proxy,
    gboolean arg_power,
    GCancellable *cancellable,
    GError **error);

void set_call_set_scan_enable (
    Set *proxy,
    gboolean arg_scan,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_set_scan_enable_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_set_scan_enable_sync (
    Set *proxy,
    gboolean arg_scan,
    GCancellable *cancellable,
    GError **error);

void set_call_set_local_device_name (
    Set *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_set_local_device_name_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_set_local_device_name_sync (
    Set *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void set_call_set_auto_connect (
    Set *proxy,
    gboolean arg_autoconnect,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_set_auto_connect_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_set_auto_connect_sync (
    Set *proxy,
    gboolean arg_autoconnect,
    GCancellable *cancellable,
    GError **error);

void set_call_enable_auto_connect (
    Set *proxy,
    gboolean arg_enableconnect,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_enable_auto_connect_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_enable_auto_connect_sync (
    Set *proxy,
    gboolean arg_enableconnect,
    GCancellable *cancellable,
    GError **error);

void set_call_set_auto_answer (
    Set *proxy,
    gboolean arg_autoanswer,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_set_auto_answer_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_set_auto_answer_sync (
    Set *proxy,
    gboolean arg_autoanswer,
    GCancellable *cancellable,
    GError **error);

void set_call_set_scan_time (
    Set *proxy,
    gint arg_time,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_set_scan_time_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_set_scan_time_sync (
    Set *proxy,
    gint arg_time,
    GCancellable *cancellable,
    GError **error);

void set_call_factoryreset (
    Set *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean set_call_factoryreset_finish (
    Set *proxy,
    GAsyncResult *res,
    GError **error);

gboolean set_call_factoryreset_sync (
    Set *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean set_get_auto_state (Set *object);
void set_set_auto_state (Set *object, gboolean value);

const gchar *set_get_btversion (Set *object);
gchar *set_dup_btversion (Set *object);
void set_set_btversion (Set *object, const gchar *value);

const gchar *set_get_local_address (Set *object);
gchar *set_dup_local_address (Set *object);
void set_set_local_address (Set *object, const gchar *value);

const gchar *set_get_local_name (Set *object);
gchar *set_dup_local_name (Set *object);
void set_set_local_name (Set *object, const gchar *value);

gboolean set_get_power_state (Set *object);
void set_set_power_state (Set *object, gboolean value);


/* ---- */

#define TYPE_SET_PROXY (set_proxy_get_type ())
#define SET_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SET_PROXY, SetProxy))
#define SET_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SET_PROXY, SetProxyClass))
#define SET_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SET_PROXY, SetProxyClass))
#define IS_SET_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SET_PROXY))
#define IS_SET_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SET_PROXY))

typedef struct _SetProxy SetProxy;
typedef struct _SetProxyClass SetProxyClass;
typedef struct _SetProxyPrivate SetProxyPrivate;

struct _SetProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SetProxyPrivate *priv;
};

struct _SetProxyClass
{
  GDBusProxyClass parent_class;
};

GType set_proxy_get_type (void) G_GNUC_CONST;

void set_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Set *set_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Set *set_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void set_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Set *set_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Set *set_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SET_SKELETON (set_skeleton_get_type ())
#define SET_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SET_SKELETON, SetSkeleton))
#define SET_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SET_SKELETON, SetSkeletonClass))
#define SET_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SET_SKELETON, SetSkeletonClass))
#define IS_SET_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SET_SKELETON))
#define IS_SET_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SET_SKELETON))

typedef struct _SetSkeleton SetSkeleton;
typedef struct _SetSkeletonClass SetSkeletonClass;
typedef struct _SetSkeletonPrivate SetSkeletonPrivate;

struct _SetSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SetSkeletonPrivate *priv;
};

struct _SetSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType set_skeleton_get_type (void) G_GNUC_CONST;

Set *set_skeleton_new (void);


G_END_DECLS

#endif /* __SET_H__ */
