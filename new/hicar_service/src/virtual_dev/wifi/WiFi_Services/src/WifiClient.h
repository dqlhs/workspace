/*
 * Generated by gdbus-codegen 2.58.1 from WifiClient.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __WIFICLIENT_H__
#define __WIFICLIENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.sal.WifiClient */

#define TYPE_WIFI_CLIENT (wifi_client_get_type ())
#define WIFI_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WIFI_CLIENT, WifiClient))
#define IS_WIFI_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WIFI_CLIENT))
#define WIFI_CLIENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WIFI_CLIENT, WifiClientIface))

struct _WifiClient;
typedef struct _WifiClient WifiClient;
typedef struct _WifiClientIface WifiClientIface;

struct _WifiClientIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_addsta) (
    WifiClient *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  void (*hostap_stat_change) (
    WifiClient *object,
    GVariant *arg_currentState);

};

GType wifi_client_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wifi_client_interface_info (void);
guint wifi_client_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wifi_client_complete_addsta (
    WifiClient *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wifi_client_emit_hostap_stat_change (
    WifiClient *object,
    GVariant *arg_currentState);



/* D-Bus method calls: */
void wifi_client_call_addsta (
    WifiClient *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_client_call_addsta_finish (
    WifiClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_client_call_addsta_sync (
    WifiClient *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_WIFI_CLIENT_PROXY (wifi_client_proxy_get_type ())
#define WIFI_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WIFI_CLIENT_PROXY, WifiClientProxy))
#define WIFI_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WIFI_CLIENT_PROXY, WifiClientProxyClass))
#define WIFI_CLIENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WIFI_CLIENT_PROXY, WifiClientProxyClass))
#define IS_WIFI_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WIFI_CLIENT_PROXY))
#define IS_WIFI_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WIFI_CLIENT_PROXY))

typedef struct _WifiClientProxy WifiClientProxy;
typedef struct _WifiClientProxyClass WifiClientProxyClass;
typedef struct _WifiClientProxyPrivate WifiClientProxyPrivate;

struct _WifiClientProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WifiClientProxyPrivate *priv;
};

struct _WifiClientProxyClass
{
  GDBusProxyClass parent_class;
};

GType wifi_client_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WifiClientProxy, g_object_unref)
#endif

void wifi_client_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WifiClient *wifi_client_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WifiClient *wifi_client_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wifi_client_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WifiClient *wifi_client_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WifiClient *wifi_client_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WIFI_CLIENT_SKELETON (wifi_client_skeleton_get_type ())
#define WIFI_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WIFI_CLIENT_SKELETON, WifiClientSkeleton))
#define WIFI_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WIFI_CLIENT_SKELETON, WifiClientSkeletonClass))
#define WIFI_CLIENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WIFI_CLIENT_SKELETON, WifiClientSkeletonClass))
#define IS_WIFI_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WIFI_CLIENT_SKELETON))
#define IS_WIFI_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WIFI_CLIENT_SKELETON))

typedef struct _WifiClientSkeleton WifiClientSkeleton;
typedef struct _WifiClientSkeletonClass WifiClientSkeletonClass;
typedef struct _WifiClientSkeletonPrivate WifiClientSkeletonPrivate;

struct _WifiClientSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WifiClientSkeletonPrivate *priv;
};

struct _WifiClientSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wifi_client_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WifiClientSkeleton, g_object_unref)
#endif

WifiClient *wifi_client_skeleton_new (void);


G_END_DECLS

#endif /* __WIFICLIENT_H__ */
