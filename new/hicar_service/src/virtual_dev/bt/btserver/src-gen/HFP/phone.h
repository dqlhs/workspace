/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __PHONE_H__
#define __PHONE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.bluetooth.hfp */

#define TYPE_HFP (hfp_get_type ())
#define HFP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_HFP, Hfp))
#define IS_HFP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_HFP))
#define HFP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_HFP, HfpIface))

struct _Hfp;
typedef struct _Hfp Hfp;
typedef struct _HfpIface HfpIface;

struct _HfpIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_answer_call) (
    Hfp *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_audio_transfer) (
    Hfp *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_iActive);

  gboolean (*handle_dail_call) (
    Hfp *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_number);

  gboolean (*handle_hold_call) (
    Hfp *object,
    GDBusMethodInvocation *invocation,
    gint arg_action);

  gboolean (*handle_mute_mic) (
    Hfp *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_micstate);

  gboolean (*handle_play_ring_tone) (
    Hfp *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reject_call) (
    Hfp *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_send_dtmf) (
    Hfp *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_dtmf);

  gboolean (*handle_set_call_auto_action) (
    Hfp *object,
    GDBusMethodInvocation *invocation,
    gint arg_action);

  gboolean (*handle_stop_ring_tone) (
    Hfp *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_terminate_call) (
    Hfp *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_hsaeasr_state) (Hfp *object);

  gboolean  (*get_private_state) (Hfp *object);

  void (*call_number_changed) (
    Hfp *object,
    const gchar *arg_name,
    const gchar *arg_phoneNumber,
    gint arg_index);

  void (*call_state_changed) (
    Hfp *object,
    gint arg_callState,
    gint arg_index);

  void (*havering) (
    Hfp *object,
    gboolean arg_state);

  void (*hsaeasr_state_changed) (
    Hfp *object,
    const gchar *arg_addr,
    gboolean arg_state);

  void (*private_state_changed) (
    Hfp *object,
    gboolean arg_privateState);

};

GType hfp_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *hfp_interface_info (void);
guint hfp_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void hfp_complete_answer_call (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_reject_call (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_terminate_call (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_hold_call (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_send_dtmf (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_dail_call (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_audio_transfer (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_mute_mic (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_set_call_auto_action (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_play_ring_tone (
    Hfp *object,
    GDBusMethodInvocation *invocation);

void hfp_complete_stop_ring_tone (
    Hfp *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void hfp_emit_hsaeasr_state_changed (
    Hfp *object,
    const gchar *arg_addr,
    gboolean arg_state);

void hfp_emit_call_number_changed (
    Hfp *object,
    const gchar *arg_name,
    const gchar *arg_phoneNumber,
    gint arg_index);

void hfp_emit_call_state_changed (
    Hfp *object,
    gint arg_callState,
    gint arg_index);

void hfp_emit_private_state_changed (
    Hfp *object,
    gboolean arg_privateState);

void hfp_emit_havering (
    Hfp *object,
    gboolean arg_state);



/* D-Bus method calls: */
void hfp_call_answer_call (
    Hfp *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_answer_call_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_answer_call_sync (
    Hfp *proxy,
    GCancellable *cancellable,
    GError **error);

void hfp_call_reject_call (
    Hfp *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_reject_call_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_reject_call_sync (
    Hfp *proxy,
    GCancellable *cancellable,
    GError **error);

void hfp_call_terminate_call (
    Hfp *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_terminate_call_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_terminate_call_sync (
    Hfp *proxy,
    GCancellable *cancellable,
    GError **error);

void hfp_call_hold_call (
    Hfp *proxy,
    gint arg_action,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_hold_call_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_hold_call_sync (
    Hfp *proxy,
    gint arg_action,
    GCancellable *cancellable,
    GError **error);

void hfp_call_send_dtmf (
    Hfp *proxy,
    const gchar *arg_dtmf,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_send_dtmf_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_send_dtmf_sync (
    Hfp *proxy,
    const gchar *arg_dtmf,
    GCancellable *cancellable,
    GError **error);

void hfp_call_dail_call (
    Hfp *proxy,
    const gchar *arg_number,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_dail_call_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_dail_call_sync (
    Hfp *proxy,
    const gchar *arg_number,
    GCancellable *cancellable,
    GError **error);

void hfp_call_audio_transfer (
    Hfp *proxy,
    gboolean arg_iActive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_audio_transfer_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_audio_transfer_sync (
    Hfp *proxy,
    gboolean arg_iActive,
    GCancellable *cancellable,
    GError **error);

void hfp_call_mute_mic (
    Hfp *proxy,
    gboolean arg_micstate,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_mute_mic_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_mute_mic_sync (
    Hfp *proxy,
    gboolean arg_micstate,
    GCancellable *cancellable,
    GError **error);

void hfp_call_set_call_auto_action (
    Hfp *proxy,
    gint arg_action,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_set_call_auto_action_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_set_call_auto_action_sync (
    Hfp *proxy,
    gint arg_action,
    GCancellable *cancellable,
    GError **error);

void hfp_call_play_ring_tone (
    Hfp *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_play_ring_tone_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_play_ring_tone_sync (
    Hfp *proxy,
    GCancellable *cancellable,
    GError **error);

void hfp_call_stop_ring_tone (
    Hfp *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hfp_call_stop_ring_tone_finish (
    Hfp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hfp_call_stop_ring_tone_sync (
    Hfp *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean hfp_get_private_state (Hfp *object);
void hfp_set_private_state (Hfp *object, gboolean value);

gboolean hfp_get_hsaeasr_state (Hfp *object);
void hfp_set_hsaeasr_state (Hfp *object, gboolean value);


/* ---- */

#define TYPE_HFP_PROXY (hfp_proxy_get_type ())
#define HFP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_HFP_PROXY, HfpProxy))
#define HFP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_HFP_PROXY, HfpProxyClass))
#define HFP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_HFP_PROXY, HfpProxyClass))
#define IS_HFP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_HFP_PROXY))
#define IS_HFP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_HFP_PROXY))

typedef struct _HfpProxy HfpProxy;
typedef struct _HfpProxyClass HfpProxyClass;
typedef struct _HfpProxyPrivate HfpProxyPrivate;

struct _HfpProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  HfpProxyPrivate *priv;
};

struct _HfpProxyClass
{
  GDBusProxyClass parent_class;
};

GType hfp_proxy_get_type (void) G_GNUC_CONST;

void hfp_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Hfp *hfp_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Hfp *hfp_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void hfp_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Hfp *hfp_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Hfp *hfp_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_HFP_SKELETON (hfp_skeleton_get_type ())
#define HFP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_HFP_SKELETON, HfpSkeleton))
#define HFP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_HFP_SKELETON, HfpSkeletonClass))
#define HFP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_HFP_SKELETON, HfpSkeletonClass))
#define IS_HFP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_HFP_SKELETON))
#define IS_HFP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_HFP_SKELETON))

typedef struct _HfpSkeleton HfpSkeleton;
typedef struct _HfpSkeletonClass HfpSkeletonClass;
typedef struct _HfpSkeletonPrivate HfpSkeletonPrivate;

struct _HfpSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  HfpSkeletonPrivate *priv;
};

struct _HfpSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType hfp_skeleton_get_type (void) G_GNUC_CONST;

Hfp *hfp_skeleton_new (void);


G_END_DECLS

#endif /* __PHONE_H__ */
