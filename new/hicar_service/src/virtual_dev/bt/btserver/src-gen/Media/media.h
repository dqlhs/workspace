/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __MEDIA_H__
#define __MEDIA_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.bluetooth.media */

#define TYPE_MEDIA (media_get_type ())
#define MEDIA(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIA, Media))
#define IS_MEDIA(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIA))
#define MEDIA_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MEDIA, MediaIface))

struct _Media;
typedef struct _Media Media;
typedef struct _MediaIface MediaIface;

struct _MediaIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_fast_forwardstart) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_fast_forwardstop) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_last_song) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_mute_music) (
    Media *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_state);

  gboolean (*handle_next_song) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_pause_music) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play_music) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_rewindstart) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_rewindstop) (
    Media *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_setplayer) (
    Media *object,
    GDBusMethodInvocation *invocation,
    gint arg_nAttrID,
    gint arg_value);

  gboolean  (*get_music_mute_state) (Media *object);

  gint  (*get_reaptemode) (Media *object);

  gint  (*get_shufflemode) (Media *object);

  void (*capability_changed) (
    Media *object,
    gint arg_ncount,
    const gchar *arg_eventname);

  void (*play_attributes_changed) (
    Media *object,
    const gchar *arg_title,
    const gchar *arg_artist,
    const gchar *arg_album,
    const gchar *arg_genre,
    gint arg_trackNumber);

  void (*play_status_changed) (
    Media *object,
    gint arg_playState,
    const gchar *arg_songLength,
    const gchar *arg_playPosition);

  void (*playermodes_changed) (
    Media *object,
    gint arg_shuffle,
    gint arg_repeate);

  void (*stream_status_changed) (
    Media *object,
    gboolean arg_streamStatus);

};

GType media_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *media_interface_info (void);
guint media_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void media_complete_next_song (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_pause_music (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_play_music (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_last_song (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_mute_music (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_fast_forwardstart (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_fast_forwardstop (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_rewindstart (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_rewindstop (
    Media *object,
    GDBusMethodInvocation *invocation);

void media_complete_setplayer (
    Media *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void media_emit_play_attributes_changed (
    Media *object,
    const gchar *arg_title,
    const gchar *arg_artist,
    const gchar *arg_album,
    const gchar *arg_genre,
    gint arg_trackNumber);

void media_emit_play_status_changed (
    Media *object,
    gint arg_playState,
    const gchar *arg_songLength,
    const gchar *arg_playPosition);

void media_emit_stream_status_changed (
    Media *object,
    gboolean arg_streamStatus);

void media_emit_capability_changed (
    Media *object,
    gint arg_ncount,
    const gchar *arg_eventname);

void media_emit_playermodes_changed (
    Media *object,
    gint arg_shuffle,
    gint arg_repeate);



/* D-Bus method calls: */
void media_call_next_song (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_next_song_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_next_song_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_pause_music (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_pause_music_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_pause_music_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_play_music (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_play_music_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_play_music_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_last_song (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_last_song_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_last_song_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_mute_music (
    Media *proxy,
    gboolean arg_state,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_mute_music_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_mute_music_sync (
    Media *proxy,
    gboolean arg_state,
    GCancellable *cancellable,
    GError **error);

void media_call_fast_forwardstart (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_fast_forwardstart_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_fast_forwardstart_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_fast_forwardstop (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_fast_forwardstop_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_fast_forwardstop_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_rewindstart (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_rewindstart_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_rewindstart_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_rewindstop (
    Media *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_rewindstop_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_rewindstop_sync (
    Media *proxy,
    GCancellable *cancellable,
    GError **error);

void media_call_setplayer (
    Media *proxy,
    gint arg_nAttrID,
    gint arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean media_call_setplayer_finish (
    Media *proxy,
    GAsyncResult *res,
    GError **error);

gboolean media_call_setplayer_sync (
    Media *proxy,
    gint arg_nAttrID,
    gint arg_value,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean media_get_music_mute_state (Media *object);
void media_set_music_mute_state (Media *object, gboolean value);

gint media_get_shufflemode (Media *object);
void media_set_shufflemode (Media *object, gint value);

gint media_get_reaptemode (Media *object);
void media_set_reaptemode (Media *object, gint value);


/* ---- */

#define TYPE_MEDIA_PROXY (media_proxy_get_type ())
#define MEDIA_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIA_PROXY, MediaProxy))
#define MEDIA_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MEDIA_PROXY, MediaProxyClass))
#define MEDIA_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MEDIA_PROXY, MediaProxyClass))
#define IS_MEDIA_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIA_PROXY))
#define IS_MEDIA_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MEDIA_PROXY))

typedef struct _MediaProxy MediaProxy;
typedef struct _MediaProxyClass MediaProxyClass;
typedef struct _MediaProxyPrivate MediaProxyPrivate;

struct _MediaProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MediaProxyPrivate *priv;
};

struct _MediaProxyClass
{
  GDBusProxyClass parent_class;
};

GType media_proxy_get_type (void) G_GNUC_CONST;

void media_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Media *media_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Media *media_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void media_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Media *media_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Media *media_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MEDIA_SKELETON (media_skeleton_get_type ())
#define MEDIA_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIA_SKELETON, MediaSkeleton))
#define MEDIA_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MEDIA_SKELETON, MediaSkeletonClass))
#define MEDIA_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MEDIA_SKELETON, MediaSkeletonClass))
#define IS_MEDIA_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIA_SKELETON))
#define IS_MEDIA_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MEDIA_SKELETON))

typedef struct _MediaSkeleton MediaSkeleton;
typedef struct _MediaSkeletonClass MediaSkeletonClass;
typedef struct _MediaSkeletonPrivate MediaSkeletonPrivate;

struct _MediaSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MediaSkeletonPrivate *priv;
};

struct _MediaSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType media_skeleton_get_type (void) G_GNUC_CONST;

Media *media_skeleton_new (void);


G_END_DECLS

#endif /* __MEDIA_H__ */
