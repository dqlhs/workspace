/*
 * Generated by gdbus-codegen 2.58.1 from WifiService.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __WIFISERVICE_H__
#define __WIFISERVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.sal.WifiService */

#define TYPE_WIFI_SERVICE (wifi_service_get_type ())
#define WIFI_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WIFI_SERVICE, WifiService))
#define IS_WIFI_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WIFI_SERVICE))
#define WIFI_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WIFI_SERVICE, WifiServiceIface))

struct _WifiService;
typedef struct _WifiService WifiService;
typedef struct _WifiServiceIface WifiServiceIface;

struct _WifiServiceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_addsta) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_connect) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_deletesta) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_disconnect) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_connection_info) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_host_ap_client_info) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_saved_networks) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_scan_results) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_wifi_enabled) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_select_network) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_netid);

  gboolean (*handle_set_periodic_scan_interval) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_interval);

  gboolean (*handle_set_wifi_enabled) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_enabled);

  gboolean (*handle_start_host_ap) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_start_scan) (
    WifiService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_host_ap) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_update_host_ap_mac) (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gint  (*get_periodic_scan_interval) (WifiService *object);

  gint  (*get_state) (WifiService *object);

  void (*wifi__scan__results__available) (
    WifiService *object);

  void (*wifi__signal__level__changed) (
    WifiService *object,
    gint arg_currentLevel,
    gint arg_previousLevel);

  void (*wifi__state__changed) (
    WifiService *object,
    gint arg_currentState,
    gint arg_previousState);

  void (*wifi__state__changed__hoatap) (
    WifiService *object,
    GVariant *arg_currentState,
    gint arg_previousState);

  void (*wifi__state__changed__host) (
    WifiService *object,
    gint arg_currentState,
    gint arg_previousState);

};

GType wifi_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wifi_service_interface_info (void);
guint wifi_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wifi_service_complete_set_wifi_enabled (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_start_scan (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_get_scan_results (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *results);

void wifi_service_complete_connect (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_update_host_ap_mac (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_addsta (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_deletesta (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_start_host_ap (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_stop_host_ap (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_get_host_ap_client_info (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void wifi_service_complete_disconnect (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_set_periodic_scan_interval (
    WifiService *object,
    GDBusMethodInvocation *invocation);

void wifi_service_complete_is_wifi_enabled (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    gboolean enabled);

void wifi_service_complete_get_connection_info (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void wifi_service_complete_get_saved_networks (
    WifiService *object,
    GDBusMethodInvocation *invocation,
    GVariant *networks);

void wifi_service_complete_select_network (
    WifiService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wifi_service_emit_wifi__scan__results__available (
    WifiService *object);

void wifi_service_emit_wifi__state__changed (
    WifiService *object,
    gint arg_currentState,
    gint arg_previousState);

void wifi_service_emit_wifi__state__changed__host (
    WifiService *object,
    gint arg_currentState,
    gint arg_previousState);

void wifi_service_emit_wifi__state__changed__hoatap (
    WifiService *object,
    GVariant *arg_currentState,
    gint arg_previousState);

void wifi_service_emit_wifi__signal__level__changed (
    WifiService *object,
    gint arg_currentLevel,
    gint arg_previousLevel);



/* D-Bus method calls: */
void wifi_service_call_set_wifi_enabled (
    WifiService *proxy,
    GVariant *arg_enabled,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_set_wifi_enabled_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_set_wifi_enabled_sync (
    WifiService *proxy,
    GVariant *arg_enabled,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_start_scan (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_start_scan_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_start_scan_sync (
    WifiService *proxy,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_get_scan_results (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_get_scan_results_finish (
    WifiService *proxy,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_get_scan_results_sync (
    WifiService *proxy,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_connect (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_connect_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_connect_sync (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_update_host_ap_mac (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_update_host_ap_mac_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_update_host_ap_mac_sync (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_addsta (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_addsta_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_addsta_sync (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_deletesta (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_deletesta_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_deletesta_sync (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_start_host_ap (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_start_host_ap_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_start_host_ap_sync (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_stop_host_ap (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_stop_host_ap_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_stop_host_ap_sync (
    WifiService *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_get_host_ap_client_info (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_get_host_ap_client_info_finish (
    WifiService *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_get_host_ap_client_info_sync (
    WifiService *proxy,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_disconnect (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_disconnect_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_disconnect_sync (
    WifiService *proxy,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_set_periodic_scan_interval (
    WifiService *proxy,
    GVariant *arg_interval,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_set_periodic_scan_interval_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_set_periodic_scan_interval_sync (
    WifiService *proxy,
    GVariant *arg_interval,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_is_wifi_enabled (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_is_wifi_enabled_finish (
    WifiService *proxy,
    gboolean *out_enabled,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_is_wifi_enabled_sync (
    WifiService *proxy,
    gboolean *out_enabled,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_get_connection_info (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_get_connection_info_finish (
    WifiService *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_get_connection_info_sync (
    WifiService *proxy,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_get_saved_networks (
    WifiService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_get_saved_networks_finish (
    WifiService *proxy,
    GVariant **out_networks,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_get_saved_networks_sync (
    WifiService *proxy,
    GVariant **out_networks,
    GCancellable *cancellable,
    GError **error);

void wifi_service_call_select_network (
    WifiService *proxy,
    GVariant *arg_netid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wifi_service_call_select_network_finish (
    WifiService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wifi_service_call_select_network_sync (
    WifiService *proxy,
    GVariant *arg_netid,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gint wifi_service_get_periodic_scan_interval (WifiService *object);
void wifi_service_set_periodic_scan_interval (WifiService *object, gint value);

gint wifi_service_get_state (WifiService *object);
void wifi_service_set_state (WifiService *object, gint value);


/* ---- */

#define TYPE_WIFI_SERVICE_PROXY (wifi_service_proxy_get_type ())
#define WIFI_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WIFI_SERVICE_PROXY, WifiServiceProxy))
#define WIFI_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WIFI_SERVICE_PROXY, WifiServiceProxyClass))
#define WIFI_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WIFI_SERVICE_PROXY, WifiServiceProxyClass))
#define IS_WIFI_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WIFI_SERVICE_PROXY))
#define IS_WIFI_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WIFI_SERVICE_PROXY))

typedef struct _WifiServiceProxy WifiServiceProxy;
typedef struct _WifiServiceProxyClass WifiServiceProxyClass;
typedef struct _WifiServiceProxyPrivate WifiServiceProxyPrivate;

struct _WifiServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WifiServiceProxyPrivate *priv;
};

struct _WifiServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType wifi_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WifiServiceProxy, g_object_unref)
#endif

void wifi_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WifiService *wifi_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WifiService *wifi_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wifi_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WifiService *wifi_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WifiService *wifi_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WIFI_SERVICE_SKELETON (wifi_service_skeleton_get_type ())
#define WIFI_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WIFI_SERVICE_SKELETON, WifiServiceSkeleton))
#define WIFI_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WIFI_SERVICE_SKELETON, WifiServiceSkeletonClass))
#define WIFI_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WIFI_SERVICE_SKELETON, WifiServiceSkeletonClass))
#define IS_WIFI_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WIFI_SERVICE_SKELETON))
#define IS_WIFI_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WIFI_SERVICE_SKELETON))

typedef struct _WifiServiceSkeleton WifiServiceSkeleton;
typedef struct _WifiServiceSkeletonClass WifiServiceSkeletonClass;
typedef struct _WifiServiceSkeletonPrivate WifiServiceSkeletonPrivate;

struct _WifiServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WifiServiceSkeletonPrivate *priv;
};

struct _WifiServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wifi_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WifiServiceSkeleton, g_object_unref)
#endif

WifiService *wifi_service_skeleton_new (void);


G_END_DECLS

#endif /* __WIFISERVICE_H__ */
