/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.core 2.1.4.201311151436.
 * Used org.franca.core 0.8.11.201401091023.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef _HSAETYPES_H_
#define _HSAETYPES_H_
#include <cstdint>
#include <vector>
#include <dbus/dbus.h>
#include <stdio.h>
#include <iostream>
#include <memory>
#include <string.h>
#include "stdint.h"
#include <list>
#include "hsaeBluelink.h"
#include <unistd.h>
#define PHONE_DB_PATH "/usr/bin/bluetooth/phone.db\0"
//add by qianzhong 2016-12-28
#define LOCAL_FILE_RINGTONE "/usr/bin/bluetooth/DefaultRingTone.wav"
#define AUTO_CONNECT_FLG       "/usr/bin/bluetooth/autocon_flg.txt"

#define USED_SQL
//extern int supportdownloadcalllog;
//#define USE_DOWNLOADCALLLOG
#include "common.h"
namespace com
{
namespace hsae
{
namespace bluetooth
{
namespace util
{

namespace HsaeTypes
{
typedef struct HsaeBtProperties
{
    string name;
    string address;
    bool powered;
    bool discoverable;
} HsaeBtProperties;

/**
 * buletooch power state.
 */
enum PowerState
{
    ON, OFF, UNKNOWN
};
enum class AnswerPairState
    : int32_t
    {
        ANSWERPAIR_REQUEST, ANSWERPAIR_CONFIRM, ANSWERPAIR_RESULT
};

enum class ConnectionState
    : int32_t
    {
        DISCONNECTION, CONNECTING, CONNECTION, NOSUPPORT
};
enum class CallState
    : int32_t
    {
        INCOME_CALL,
        CALL_START,
        CALL_REJECT,
        CALL_TERMINATE,
        CALL_HOLD,
        CALL_ACTIVE,
        OUTGONING_CALL,
        MPTY_CALL_WAITING,
        MPTY_CALL_HOLD,
        MPTY_CALL_ACTIVE
};
enum class PlayState
    : int32_t
    {
        STOP, PLAYING, PAUSED, FWD, REV, ERROR
};
enum class PROFILEID
    : int32_t
    {
        ALL_AUDIO = 0,
    HEADSET = 1,
    HANDFREE = 2,
    AUDIOSINK = 4,
    AVRCP = 8,
    PBAP = 16,
    MAP = 32,
    SPP = 64,
    SPP_IAP = 256,
    HID = 512,
    PAN = 1024,
    RFCOMM_1 = 4096,
    RFCOMM_2 = 8192,
    RFCOMM_3 = 16384,
    RFCOMM_4 = 32768,
    RFCOMM_5 = 65536,

};
enum class PhoneBookDownLoadState
    : int32_t
    {
        START_DOWNLOADING, DOWNLOADING, DOWNLOADED,DOWNFAILD
};
typedef enum
{
    HSPB__TYPE_NAME       = 'N',//
    HPB__TYPE_TEL_HOME	= 'H',//3
    HPB__TYPE_TEL_WORK	= 'W',//2
    HPB__TYPE_TEL_CELL	= 'M',//
    HPB__TYPE_TEL_OTHER	= 'O',
    HPB__TYPE_FAX        = 'F',
    HPB__TYPE_TIME       = 'T',
    HPB__TYPE_DIOUT      = 'D',
    HPB__TYPE_MISS       = 'S',
    HPB__TYPE_RECEIVE	= 'R',
    HPB__TYPE_COMBINE	= 'C',
    HPB__TYPE_TEL_NULL	= 0
}  BT_PhoneElementType;
typedef enum PhoneType_e
{
    PREF,
    WORK,
    HOME,
    VOICE,
    FAX,
    MSG,
    CELL,
    PAGER,
    BBS,
    MODEM,
    CAR,
    ISDN,
    VIDEO,
    NONE
} PhoneType;
struct CallInfo
{
    std::string dir;
    std::string date;
    std::string time;
};

struct Phone
{
    std::string phoneNumber;
    PhoneType  phoneType;
};
typedef std::vector< Phone > PhoneArray;
struct Contact
{
    std::string name;
    PhoneArray phone;
    int32_t phone_count;
    CallInfo call_info;
};
struct NewContact
{
    std::string name;
    std::string fpy;
    std::string py;
    std::string phoneNumber;

    PhoneType type;
    CallInfo call_info;
};
typedef struct
{

    std::string name="";
    std::string num="";
    std::string dir ="unknown";
    std::string startdate="";
    time_t starttime;
    bool active =false;
} CALLSTATE;
typedef  unsigned char anw_btaddr[6];
typedef std::vector< NewContact > Contacts;
typedef std::vector< Contact > Calllogs;
struct PlayPosition
{
    std::string songLength;
    std::string songPosition;
};
struct PlayStatus
{
    PlayState playState;
    PlayPosition positon;
};
struct CurrentStates
{
    std::string btAddress;
    ConnectionState hfpState;
    bool avrcpState;
    bool a2dpState;
    bool pbapState;
    CallState callState;
    bool audioState;
    PlayStatus playStatus;
    std::string phoneNumber;
    std::string phonename;
};
struct PlayAttribute
{
    std::string title;
    std::string artist;
    std::string album;
    std::string genre;
    int32_t trackNumber;
};
struct Pair
{
    std::string btAddress;
    std::string btDeviceName;
};
struct LocalProperty {
        std::string name;
        std::string address;
        bool powered;
};
typedef std::vector< Pair > Pairs;

enum class PhoneBookType
    : int32_t
    {
        PB, MISSED, OUTGOING, INCOMING, COMBINED
};

/**
 * PhoneBookLocation.
 */
enum class PhoneBookLocation
    : int32_t
    {
        PHONE, SIM1, SIM2
};
/**
 * PhoneBook data.
 */
typedef struct PhoneBookData_e
{
    PhoneBookType type;
    PhoneBookLocation location;
} PhoneBookData;

typedef enum HSAE_HANDSFREE_AUTO_REACTION_e
{
    HSAE_HF_AUTO_NO_ACTION, HSAE_HF_AUTO_ANSWER, HSAE_HF_AUTO_REJECT
} HSAE_HANDSFREE_AUTO_REACTION;

typedef enum
{
    HSAE_CALL_HELD_RELEASE_HELD = 0x00, // 0.Releases all held calls or sets User Determined User Busy (UDUB) for a waiting call
    HSAE_CALL_HELD_RELEASE_ACTS, // 1.Releases all active calls (if any exist) and accepts the other (held or waiting)
    HSAE_CALL_HELD_HOLD_CALLS, // 2.Places all active calls (if any exist) on hold and accepts the other (held or waiting) call
    HSAE_CALL_HELD_ADD_HELD_CALL,      // 3.Adds a held call to the conversation
    HSAE_CALL_HELD_RELEASE_SPEC_ACT, // 1x.Releases specified active call only (<idx>)
    HSAE_CALL_HELD_REQ_PRIVATE_SPEC_CALL, // 2x.Request private consultation mode with specified call (<idx>). (Place all calls on hold EXCEPT the call indicated by <idx>.)
} HSAE_HANDSFREE_CALLHELD_OPTION;

typedef enum
{
    STATE_IDLE = 0,
    STATE_ACTIVATED,
    STATE_CONNECTING,
    STATE_RECONNECTING,
    STATE_DISCONNECTED,
    STATE_CONNECTED,
    STATE_UNKNOWN,
    STATE_ERR
}BLUETOOTH_STATE;

typedef enum
{
    PROFILE_HF = 0,
    PROFILE_A2DP ,
    PROFILE_AVRCP ,
    PROFILE_PHONEBOOK ,
    SERVICE_TOTAL_NUM
}BLUETOOTH_PROFILE;


} // namespace CommonTypes

} // namespace basic
} // namespace bluetooth
} // namespace hsae
} // namespace com

#endif // COM_HSAE_BLUETOOTH_BASIC_Common_Types_H_
