/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DEVICE_H__
#define __DEVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.bluetooth.device */

#define TYPE_DEVICE (device_get_type ())
#define DEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE, Device))
#define IS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE))
#define DEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DEVICE, DeviceIface))

struct _Device;
typedef struct _Device Device;
typedef struct _DeviceIface DeviceIface;

struct _DeviceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_accpect_pair) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_clear_pair_device) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect_device) (
    Device *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_btAddress,
    gint arg_profileId);

  gboolean (*handle_delete_pair_device) (
    Device *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_btAddress);

  gboolean (*handle_dis_connect_current_device) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_dis_connect_device) (
    Device *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_btAddress,
    gint arg_profileId);

  gboolean (*handle_get_current_states) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_local_properties) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_paired_list) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_refuse_pair) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_start_scan) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_scan) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_auto_connect_state) (Device *object);

  gboolean  (*get_bt_service_state) (Device *object);

  const gchar * (*get_local_address) (Device *object);

  const gchar * (*get_local_name) (Device *object);

  gboolean  (*get_pair_state) (Device *object);

  gboolean  (*get_power_state) (Device *object);

  gboolean  (*get_scan_state) (Device *object);

  gint  (*get_testpoweron) (Device *object);

  void (*aclconnectstate) (
    Device *object,
    const gchar *arg_mac,
    gint arg_state);

  void (*battery_changed) (
    Device *object,
    gint arg_batteryState);

  void (*connect_state_changed) (
    Device *object,
    const gchar *arg_address,
    gint arg_profileId,
    gint arg_connectState);

  void (*current_state_changed) (
    Device *object,
    const gchar *arg_btAddress,
    gint arg_hfpConnnectState,
    gboolean arg_pbapConnnectState,
    gboolean arg_avrcpConnnectState,
    gboolean arg_a2cpConnnectState,
    gint arg_callState,
    const gchar *arg_phoneNumber,
    gboolean arg_audioState,
    gint arg_playState,
    const gchar *arg_songLength,
    const gchar *arg_playPosition);

  void (*disconnectreason) (
    Device *object,
    const gchar *arg_mac,
    gint arg_reason);

  void (*local_property_changed) (
    Device *object,
    const gchar *arg_address,
    const gchar *arg_localName,
    gboolean arg_powerState);

  void (*pair_list_changed) (
    Device *object,
    const gchar *arg_pairList);

  void (*requestpair) (
    Device *object,
    const gchar *arg_phonename,
    const gchar *arg_phoneaddr);

  void (*search_device_changed) (
    Device *object,
    const gchar *arg_address,
    const gchar *arg_localName);

};

GType device_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *device_interface_info (void);
guint device_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void device_complete_start_scan (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_stop_scan (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_accpect_pair (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_refuse_pair (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_delete_pair_device (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_clear_pair_device (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_connect_device (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_dis_connect_device (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_dis_connect_current_device (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_get_paired_list (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_get_local_properties (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_get_current_states (
    Device *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void device_emit_pair_list_changed (
    Device *object,
    const gchar *arg_pairList);

void device_emit_requestpair (
    Device *object,
    const gchar *arg_phonename,
    const gchar *arg_phoneaddr);

void device_emit_aclconnectstate (
    Device *object,
    const gchar *arg_mac,
    gint arg_state);

void device_emit_disconnectreason (
    Device *object,
    const gchar *arg_mac,
    gint arg_reason);

void device_emit_current_state_changed (
    Device *object,
    const gchar *arg_btAddress,
    gint arg_hfpConnnectState,
    gboolean arg_pbapConnnectState,
    gboolean arg_avrcpConnnectState,
    gboolean arg_a2cpConnnectState,
    gint arg_callState,
    const gchar *arg_phoneNumber,
    gboolean arg_audioState,
    gint arg_playState,
    const gchar *arg_songLength,
    const gchar *arg_playPosition);

void device_emit_connect_state_changed (
    Device *object,
    const gchar *arg_address,
    gint arg_profileId,
    gint arg_connectState);

void device_emit_local_property_changed (
    Device *object,
    const gchar *arg_address,
    const gchar *arg_localName,
    gboolean arg_powerState);

void device_emit_search_device_changed (
    Device *object,
    const gchar *arg_address,
    const gchar *arg_localName);

void device_emit_battery_changed (
    Device *object,
    gint arg_batteryState);



/* D-Bus method calls: */
void device_call_start_scan (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_start_scan_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_start_scan_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_stop_scan (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_stop_scan_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_stop_scan_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_accpect_pair (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_accpect_pair_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_accpect_pair_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_refuse_pair (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_refuse_pair_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_refuse_pair_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_delete_pair_device (
    Device *proxy,
    const gchar *arg_btAddress,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_delete_pair_device_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_delete_pair_device_sync (
    Device *proxy,
    const gchar *arg_btAddress,
    GCancellable *cancellable,
    GError **error);

void device_call_clear_pair_device (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_clear_pair_device_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_clear_pair_device_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_connect_device (
    Device *proxy,
    const gchar *arg_btAddress,
    gint arg_profileId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_connect_device_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_connect_device_sync (
    Device *proxy,
    const gchar *arg_btAddress,
    gint arg_profileId,
    GCancellable *cancellable,
    GError **error);

void device_call_dis_connect_device (
    Device *proxy,
    const gchar *arg_btAddress,
    gint arg_profileId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_dis_connect_device_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_dis_connect_device_sync (
    Device *proxy,
    const gchar *arg_btAddress,
    gint arg_profileId,
    GCancellable *cancellable,
    GError **error);

void device_call_dis_connect_current_device (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_dis_connect_current_device_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_dis_connect_current_device_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_get_paired_list (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_get_paired_list_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_get_paired_list_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_get_local_properties (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_get_local_properties_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_get_local_properties_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);

void device_call_get_current_states (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_get_current_states_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_get_current_states_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *device_get_local_address (Device *object);
gchar *device_dup_local_address (Device *object);
void device_set_local_address (Device *object, const gchar *value);

const gchar *device_get_local_name (Device *object);
gchar *device_dup_local_name (Device *object);
void device_set_local_name (Device *object, const gchar *value);

gboolean device_get_power_state (Device *object);
void device_set_power_state (Device *object, gboolean value);

gboolean device_get_scan_state (Device *object);
void device_set_scan_state (Device *object, gboolean value);

gboolean device_get_pair_state (Device *object);
void device_set_pair_state (Device *object, gboolean value);

gboolean device_get_bt_service_state (Device *object);
void device_set_bt_service_state (Device *object, gboolean value);

gboolean device_get_auto_connect_state (Device *object);
void device_set_auto_connect_state (Device *object, gboolean value);

gint device_get_testpoweron (Device *object);
void device_set_testpoweron (Device *object, gint value);


/* ---- */

#define TYPE_DEVICE_PROXY (device_proxy_get_type ())
#define DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE_PROXY, DeviceProxy))
#define DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE_PROXY, DeviceProxyClass))
#define DEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE_PROXY, DeviceProxyClass))
#define IS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE_PROXY))
#define IS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE_PROXY))

typedef struct _DeviceProxy DeviceProxy;
typedef struct _DeviceProxyClass DeviceProxyClass;
typedef struct _DeviceProxyPrivate DeviceProxyPrivate;

struct _DeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DeviceProxyPrivate *priv;
};

struct _DeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType device_proxy_get_type (void) G_GNUC_CONST;

void device_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device *device_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Device *device_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void device_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device *device_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Device *device_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DEVICE_SKELETON (device_skeleton_get_type ())
#define DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE_SKELETON, DeviceSkeleton))
#define DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE_SKELETON, DeviceSkeletonClass))
#define DEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE_SKELETON, DeviceSkeletonClass))
#define IS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE_SKELETON))
#define IS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE_SKELETON))

typedef struct _DeviceSkeleton DeviceSkeleton;
typedef struct _DeviceSkeletonClass DeviceSkeletonClass;
typedef struct _DeviceSkeletonPrivate DeviceSkeletonPrivate;

struct _DeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DeviceSkeletonPrivate *priv;
};

struct _DeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType device_skeleton_get_type (void) G_GNUC_CONST;

Device *device_skeleton_new (void);


G_END_DECLS

#endif /* __DEVICE_H__ */
