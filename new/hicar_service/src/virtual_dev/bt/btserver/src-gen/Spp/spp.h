/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SPP_H__
#define __SPP_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsaeyz.bluetooth.spp */

#define TYPE_SPP (spp_get_type ())
#define SPP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SPP, Spp))
#define IS_SPP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SPP))
#define SPP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SPP, SppIface))

struct _Spp;
typedef struct _Spp Spp;
typedef struct _SppIface SppIface;

struct _SppIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_senddata) (
    Spp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_data,
    gint arg_datalen);

  gboolean (*handle_setparames) (
    Spp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_data,
    gint arg_datalen);

  gboolean  (*get_channelstate) (Spp *object);

  void (*channel_changed) (
    Spp *object,
    gboolean arg_state);

  void (*channeldata) (
    Spp *object,
    GVariant *arg_data,
    gint arg_datalen);

};

GType spp_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *spp_interface_info (void);
guint spp_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void spp_complete_senddata (
    Spp *object,
    GDBusMethodInvocation *invocation);

void spp_complete_setparames (
    Spp *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void spp_emit_channel_changed (
    Spp *object,
    gboolean arg_state);

void spp_emit_channeldata (
    Spp *object,
    GVariant *arg_data,
    gint arg_datalen);



/* D-Bus method calls: */
void spp_call_senddata (
    Spp *proxy,
    GVariant *arg_data,
    gint arg_datalen,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean spp_call_senddata_finish (
    Spp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean spp_call_senddata_sync (
    Spp *proxy,
    GVariant *arg_data,
    gint arg_datalen,
    GCancellable *cancellable,
    GError **error);

void spp_call_setparames (
    Spp *proxy,
    GVariant *arg_data,
    gint arg_datalen,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean spp_call_setparames_finish (
    Spp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean spp_call_setparames_sync (
    Spp *proxy,
    GVariant *arg_data,
    gint arg_datalen,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean spp_get_channelstate (Spp *object);
void spp_set_channelstate (Spp *object, gboolean value);


/* ---- */

#define TYPE_SPP_PROXY (spp_proxy_get_type ())
#define SPP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SPP_PROXY, SppProxy))
#define SPP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SPP_PROXY, SppProxyClass))
#define SPP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SPP_PROXY, SppProxyClass))
#define IS_SPP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SPP_PROXY))
#define IS_SPP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SPP_PROXY))

typedef struct _SppProxy SppProxy;
typedef struct _SppProxyClass SppProxyClass;
typedef struct _SppProxyPrivate SppProxyPrivate;

struct _SppProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SppProxyPrivate *priv;
};

struct _SppProxyClass
{
  GDBusProxyClass parent_class;
};

GType spp_proxy_get_type (void) G_GNUC_CONST;

void spp_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Spp *spp_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Spp *spp_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void spp_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Spp *spp_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Spp *spp_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SPP_SKELETON (spp_skeleton_get_type ())
#define SPP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SPP_SKELETON, SppSkeleton))
#define SPP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SPP_SKELETON, SppSkeletonClass))
#define SPP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SPP_SKELETON, SppSkeletonClass))
#define IS_SPP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SPP_SKELETON))
#define IS_SPP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SPP_SKELETON))

typedef struct _SppSkeleton SppSkeleton;
typedef struct _SppSkeletonClass SppSkeletonClass;
typedef struct _SppSkeletonPrivate SppSkeletonPrivate;

struct _SppSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SppSkeletonPrivate *priv;
};

struct _SppSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType spp_skeleton_get_type (void) G_GNUC_CONST;

Spp *spp_skeleton_new (void);


G_END_DECLS

#endif /* __SPP_H__ */
